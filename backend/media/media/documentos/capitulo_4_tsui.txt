Proceso de software
Modelos
Introducir el concepto genérico de modelos de procesos de ingeniería de software.
Discutir los tres modelos de proceso tradicionales:
1. Cascada
2. Incremental
3. Espiral
Discuta el enfoque del equipo jefe de programación.
Describa el Proceso Racional Unificado junto con la importancia de los criterios de entrada y salida para todos los procesos.
criterios de entrada y salida para todos los procesos.
Evaluar los procesos en términos del Modelo de Madurez de Capacidades (CMM) y del Modelo Integrado de Madurez de Capacidades (CMMI).
Debatir la necesidad de modificar y perfeccionar un proceso estándar.
4.1 Procesos de software
Hemos mencionado los procesos en capítulos anteriores y hemos indicado el importante papel que desempeñan en la ingeniería del software.
que desempeñan en la ingeniería del software. El proceso de desarrollo y soporte de software
a menudo requiere muchas tareas distintas que deben realizar diferentes personas en secuencias relacionadas.
secuencias relacionadas. Por ejemplo, requisitos, diseño, codificación, pruebas unitarias, publicación, soporte y mantenimiento (como se muestra en el capítulo 2).
mantenimiento (como se muestra en el Capítulo 2) pueden realizarse paso a paso en cualquier proyecto. En
se deja a los ingenieros de software realizar las tareas basándose en su propia experiencia, formación
y valores, no necesariamente perciben y realizan las tareas del mismo modo o en el mismo orden.
el mismo orden. En otras palabras, no siguen un proceso sistemático. A veces
ni siquiera realizan las mismas tareas en todos sus proyectos. Esta incoherencia hace que los proyectos
proyectos lleven más tiempo, con productos finales deficientes y, en situaciones peores, el fracaso total del proyecto.
Watts Humphrey ha escrito mucho sobre procesos de software y mejora de procesos
en general y también ha introducido el proceso de software personal a nivel individual en
su libro Introduction to the Personal Software Process (Humphrey, 1997).
En este capítulo cubriremos los procesos de software tradicionales, y dejaremos los procesos emergentes, como los procesos ágiles, en un segundo plano.
emergentes, como los procesos ágiles, para el capítulo siguiente. También trataremos la evaluación
evaluación general de los procesos.
4.1.1 Objetivo de los modelos de procesos de software
El objetivo de un modelo de proceso de software es proporcionar orientación para coordinar y controlar sistemáticamente las tareas que deben realizarse para lograr el producto final y los objetivos del proyecto.
y los objetivos del proyecto. Un modelo de proceso (similar a la definición proporcionada en el capítulo
2 para el proceso de desarrollo de software) define lo siguiente:
Un conjunto de tareas que deben realizarse
Las entradas y salidas de cada tarea
Las condiciones previas y posteriores de cada tarea.
La secuencia y el flujo de estas tareas
Podríamos preguntarnos si es necesario un proceso de desarrollo de software si sólo hay
si sólo hay una persona desarrollando el software. La respuesta es que depende. Si el proceso de desarrollo de software se considera únicamente un agente de coordinación y control, no es necesario porque sólo hay una persona.
necesidad porque sólo hay una persona. Sin embargo, si el proceso se considera una hoja de ruta
prescriptivo para generar varios entregables intermedios además del código ejecutable
ejecutable -por ejemplo, un documento de diseño, una guía de usuario, casos de prueba- entonces incluso un proyecto de desarrollo de software de una sola persona puede necesitar un proceso.
una persona puede necesitar un proceso.
4.1.2 El modelo de proceso "más sencillo
Cuando se deja solos a los programadores, naturalmente gravitan hacia lo que a menudo se percibe como la tarea más importante, la codificación.
como la tarea más importante, la codificación. La mayoría de las personas relacionadas con las tecnologías de la información, incluidos los ingenieros de software, empiezan su profesión
aprendiendo a escribir código en algún lenguaje de programación, como se indica en el Capítulo 1.
La figura 4.1 muestra este proceso, quizá sencillo. En ella se describen las tareas implicadas en el ciclo código-compilación-prueba unitaria.
compilación-prueba unitaria. Dado que la codificación suele considerarse la tarea central de este proceso,
el modelo se conoce a veces como el modelo de "codificar y corregir". Cuando se detecta un defecto en la compilación o en las pruebas unitarias, se realiza la depuración, que es el análisis y resolución de defectos,
se lleva a cabo. A continuación, se modifica el código para reflejar la corrección del defecto y se vuelve a compilar.
A continuación se realizan las pruebas unitarias. Una vez finalizadas las pruebas unitarias y resueltos todos los defectos detectados, se libera el código.
detectados, se libera el código.
Dos áreas de la figura 4.1 merecen cierta atención. La primera es el planteamiento del problema,
el precursor de lo que hoy llamamos especificaciones de requisitos en ingeniería de software.
La importancia de esta área no fue reconocida ni apreciada en sus inicios. En
segunda es la de las pruebas. Las pruebas unitarias del código las realizaba de manera informal el
el autor del código. Como a menudo se permitía que el enunciado del problema fuera incompleto
incompleto o poco claro, la prueba del código para garantizar que cumplía el enunciado del
incompleto. El esfuerzo de comprobación reflejaba a menudo lo que el programador entendía que era el problema.
el problema.
A pesar de todos sus defectos, este sencillo modelo de proceso sirvió para muchos de los primeros proyectos.
A medida que aumentaba la complejidad de los proyectos de software, se introdujeron más tareas, como el diseño y la integración,
como el diseño y la integración. A medida que más personas participaban en un proyecto de software, se introdujo una mejor coordinación.
mejor coordinación. Las tareas del proceso, la relación entre ellas y su flujo se definen mejor.
estas tareas se definen mejor.
A medida que los ingenieros de software adquirían más experiencia, se introdujeron diferentes modelos de desarrollo de software
para resolver diferentes problemas. Hoy en día se entiende que no existe
que no existe un modelo de proceso que se adapte a todos los proyectos de software. Algunos de los primeros modelos
En este capítulo se presentarán algunos de los modelos de proceso anteriores y los temas asociados; los modelos de proceso desarrollados más recientemente se tratarán en el capítulo 5.
4.2 Modelos de procesos tradicionales
En esta sección, se presentarán varios de los modelos de desarrollo de software más antiguos. Cada
Cada uno de estos modelos ha sido adaptado y modificado para ajustarse a diferentes situaciones. Presentaremos
presentaremos los modelos sólo en su forma genérica.
4.2.1 Modelo en cascada
El modelo de proceso de desarrollo de software en cascada es probablemente el modelo
más antiguo. A veces se le conoce como el modelo clásico de ciclo de vida del software. Aunque muchos Royce (1970) es una de las primeras personas que escribió sobre este modelo.
este modelo. El nombre del modelo de cascada se deriva del proceso que representa: las tareas
secuencialmente una tras otra, con el resultado de una tarea cayendo en la siguiente.
siguiente, como se muestra en la figura 4.2.
El modelo, que se asemeja a una cascada de varias capas, ofrecía muchas ventajas, sobre todo a
los gestores de proyectos de software a principios de la década de 1970. Sirvió como herramienta para gestionar proyectos de
de software y representaba el ciclo de vida del software a medida que éste pasaba por distintas
distintas fases de desarrollo. Proporcionaba a los gestores de proyectos una forma de describir el estado
más preciso que decir que el software está "casi terminado". Aunque ahora reconocemos
Aunque ahora reconocemos muchos defectos de este proceso, el modelo en cascada también tiene muchos aspectos positivos:
Los requisitos deben especificarse en los primeros pasos. Este modelo de cascada incluye la etapa de planificación
fase del plan, que puede haberse completado internamente en la organización, por lo que es un precursor
de los requisitos.
Antes de que el software pueda empaquetarse para su publicación, deben completarse cuatro tareas principales: requisitos, diseño, implementación y prueba (que en la figura 4.2 se muestran como las etapas resaltadas).
en la Figura 4.2).
Los resultados de cada etapa se introducen en la siguiente.
El proyecto de software puede seguirse a medida que avanza secuencialmente a través de etapas específicas e identificables.
específicas e identificables.

Debido a la gran cantidad de documentos que se generaban con los requisitos,
diseño y pruebas, el modelo de cascada también se conoce como enfoque basado en documentos.
A lo largo de los años, desde su definición inicial, se han introducido muchas modificaciones en el modelo básico de cascada.
desde su primera definición, cada una de las cuales aborda algunas de sus deficiencias. Por ejemplo, el modelo
solía considerarse un modelo de iteración única que ofrecía muy poco solapamiento de tareas.
Así, se introdujeron flechas hacia atrás en el diagrama para representar la adición de actividades iterativas.
iterativas. El modelo de cascada también ha sido criticado por su limitada interacción con los usuarios
sólo en la fase de requisitos y en la entrega del software. Los implementadores del
modelo de cascada incluyeron a los usuarios y clientes en la fase de diseño con técnicas
como el desarrollo conjunto de aplicaciones (JAD) y en la fase de prueba. También se reconoce
la fase de mantenimiento, que puede ser la más larga de un proyecto.
La contribución más importante del modelo de cascada es probablemente que dio a la
a la ingeniería de software un proceso en el que centrar su atención. Como resultado de este enfoque en el proceso, el modelo de cascada, así como los problemas de calidad del software en general, empezaron a resolverse.
en general, empezaron a resolverse con el paso de los años.
4.2.2 Enfoque de equipo de programador jefe
El enfoque del equipo de programadores jefe es un tipo de metodología de coordinación y gestión más que un proceso de software. El concepto era una idea organizativa popular
a mediados de la década de 1970.
En su libro The Mythical Man Month, Fred Brooks (1995) describió un enfoque de equipo pequeño para coordinar las actividades de desarrollo de software. Atribuyó la propuesta original
original a Harlan Mills, de IBM. El enfoque propuesto imita la organización de un equipo quirúrgico
donde hay un cirujano jefe y otros especialistas para apoyar al cirujano jefe. En su lugar
En lugar de un gran número de personas trabajando en pequeñas partes del problema, hay un programador jefe que planifica, divide y distribuye las tareas.
programador jefe que planifica, divide y asigna el trabajo a los distintos especialistas. El programador jefe de
El programador jefe actúa como un cirujano jefe en un equipo quirúrgico y dirige todas las actividades de trabajo.
las actividades. El tamaño del equipo debe ser de entre siete y diez personas, compuestas por especialistas como
como diseñadores, programadores, probadores, editores de documentación y el programador jefe.
Este enfoque tenía sentido y es un precursor de la división de un gran problema en múltiples
componentes y, a continuación, hacer que los pequeños equipos de programadores jefe desarrollen los componentes.
4.2.3 Modelo incremental
El modelo incremental puede considerarse una modificación del modelo en cascada. A medida que
A medida que los proyectos de software aumentaban de tamaño, se reconoció que es mucho más fácil, y a veces necesario, desarrollar el software si los grandes proyectos se subdividen en componentes más pequeños,
que pueden así desarrollarse de forma incremental e iterativa. Al principio, cada componente seguía un modelo de proceso en cascada, pasando por cada paso de forma iterativa. En el modelo
modelo incremental, los componentes se desarrollaban de forma superpuesta, como se muestra en la figura 4.3.
en la figura 4.3. Todos los componentes debían integrarse y probarse como un todo en una prueba final del sistema.
prueba final del sistema. El modelo incremental ofrecía cierta contención del riesgo. Si
Si uno de los componentes tenía problemas, los demás podían seguir desarrollándose independientemente.
independientemente. A menos que el problema fuera universal, como que la tecnología subyacente fuera defectuosa, un problema no frenaría todo el sistema.
subyacente fuera defectuosa, un problema no frenaría todo el proceso de desarrollo.

Otra perspectiva al utilizar el modelo incremental es desarrollar primero el núcleo del software que contiene la mayor parte de la funcionalidad necesaria.
que contenga la mayor parte de la funcionalidad necesaria. El primer incremento puede
a los usuarios y clientes como versión 1. La funcionalidad adicional y las características
adicionales se desarrollan y entregan por separado a medida que se completan, convirtiéndose en las versiones 2, 3 y así sucesivamente.
Versión 2, Versión 3, etc. Utilizar el modelo incremental de esta manera proporciona
un enfoque más parecido al desarrollo evolutivo de un producto de software. Cuando
Cuando se utiliza en este modo de desarrollo, el modelo de la figura 4.3 no tendría el cubo de integración.
El modelo incremental de la figura 4.3 tendría versiones individuales. Por ejemplo,
El requisito 1 sería la versión de funcionalidad básica. Los demás requisitos
cada uno de los otros requisitos. La figura 4.4 representa el escenario incremental de múltiples versiones
en el que la primera versión, la versión 1, es la función principal, seguida de versiones posteriores
que pueden incluir correcciones de errores de versiones anteriores junto con nuevas características funcionales.
El modelo incremental de múltiples versiones también permite hacer evolucionar la primera versión,
que puede tener defectos, en una solución ideal a través de versiones posteriores. Esto facilita
el desarrollo y la gestión evolutivos del software, un modelo por el que han abogado muchos
por muchos, especialmente por Tom Gilb, que ha escrito sobre el proceso "evo" (Gilb y Gilb,
2004). El número de versiones de un proyecto de software dependerá de la naturaleza y los objetivos del proyecto.
del proyecto. Aunque cada versión se construye de forma independiente, existe un vínculo entre ellas
porque el diseño y el código de la versión anterior son la base sobre la que se construyen las futuras.
se construyen las versiones futuras.
Ambos modelos incrementales utilizan la metodología de "divide y vencerás", que consiste en descomponer en partes un problema grande y complejo,
problema grande y complejo se descompone en partes. La dificultad de este modelo es que
problemas también están entrelazados, lo que dificulta la disociación de las partes en componentes implementables independientemente.
componentes independientes. Esto requerirá una comprensión profunda del problema, la solución y el entorno de uso. El solapamiento de los distintos incrementos es otra
El solapamiento de los diferentes incrementos es otra área de dificultad, ya que puede haber cierta dependencia secuencial de la información entre los componentes. El grado de solapamiento depende de cuánta información
de cuánta información previa sea necesaria.
4.2.4 Modelo en espiral
Otro enfoque evolutivo del desarrollo de software es el modelo en espiral, propuesto
propuesto por Barry Boehm (1988) en un momento en el que el enfoque basado en documentos del modelo en cascada suscitaba preocupación.
del modelo en cascada. El primer modelo en espiral se basa en experiencias con varios
grandes proyectos gubernamentales de software en TRW. Un aspecto importante del modelo en espiral es su
énfasis en la reducción de riesgos en el desarrollo de software. El modelo es, por tanto, un enfoque
del proceso de software. Proporciona un enfoque cíclico para desarrollar de forma incremental el
sistema de software al tiempo que se reduce el riesgo del proyecto a medida que éste atraviesa ciclos de
desarrollo, como se ilustra en la figura 4.5.
El modelo en espiral tiene cuatro cuadrantes y el proyecto de software atraviesa los cuadrantes a medida que se desarrolla de forma incremental.
cuadrantes a medida que se desarrolla de forma incremental. Como muestra la figura, la trayectoria en espiral puede no ser muy fluida.
ser muy suave. Cada ciclo implica la misma secuencia de pasos para cada una de las preocupaciones,
componentes o artefactos.
Aplicable tanto al desarrollo de software como a los proyectos de mejora de software, el modelo en espiral se basa en un objetivo.
modelo en espiral se basa en un objetivo. El proceso en espiral implica
o iteraciones de este objetivo o requisito hasta que se consiga el resultado final o se demuestre que es inalcanzable.
o se demuestre que es inalcanzable. Un recorrido típico por los cuatro cuadrantes es el siguiente:
1. 1. Identificar los objetivos, alternativas o restricciones para cada ciclo de la espiral.
2. 2. Evaluar las alternativas en relación con los objetivos y las limitaciones. Al realizar
este paso, se identifican y evalúan muchos de los riesgos.
3. 3. En función de la cantidad y el tipo de riesgos identificados, desarrollar un prototipo, una evaluación más detallada, un desarrollo evolutivo o cualquier otro paso para seguir avanzando.
evaluación más detallada, un desarrollo evolutivo o algún otro paso para reducir aún más
reducir aún más el riesgo de alcanzar el objetivo identificado. Por otra parte, si el riesgo
se reduce sustancialmente, el siguiente paso puede ser simplemente una tarea como requisitos
diseño o código.
4. Validar la consecución del objetivo y planificar el siguiente ciclo.

Una parte integral del ciclo es la revisión de todas las actividades y productos completados en
del ciclo por parte de los principales participantes en el proyecto. El principal objetivo de la revisión
es garantizar que todas las partes sigan comprometidas con el proyecto y coincidan
con el enfoque para la siguiente fase del proyecto.
Dado que el modelo en espiral se basa en la reducción del riesgo del proyecto mediante iteraciones,
incorpora varias características convenientes.
El modelo incorpora la creación de prototipos y el modelado como parte integrante del proceso.
Permite enfoques iterativos y evolutivos de todas las actividades en función de la cantidad de
riesgos.
El modelo no impide la revisión de una actividad anterior si se identifica una alternativa mejor o un nuevo riesgo.
si se identifica una alternativa mejor o un nuevo riesgo.
Lo irónico del modelo en espiral es que uno de sus riesgos es la dependencia de la experiencia en evaluación de riesgos. No todos los ingenieros de software están formados o tienen experiencia en la identificación y el análisis de riesgos.
y el análisis de riesgos.

4.3 Un proceso más moderno
En los últimos años se han introducido muchos procesos nuevos. En esta sección se describe un
desarrollado inicialmente por Rational Software Corporation, se describe en esta sección.
4.3.1 Fundamentos generales del marco del Proceso Racional Unificado
El Rational Unified Process (RUP) es un marco de procesos de software, más que un proceso único, desarrollado por Rational Software Corporation.
desarrollado por Rational Software Corporation, que fue adquirida por IBM. El origen
de RUP tiene sus raíces en el Objectory Process original de 1987 y en el Rational Objectory
Process de 1997, así como en el Lenguaje Unificado de Modelado (UML). Fowler
y Scott (2003) ofrecen una amplia cobertura de UML en su libro
UML Distilled. En muchos sentidos, RUP ha incorporado experiencias anteriores
del modelo de proceso incremental e iterativo y del modelo en espiral.
espiral. Este marco de procesos se basa en tres conceptos principales:
Basado en casos de uso y requisitos
Centrado en la arquitectura
Iterativo e incremental
Los casos de uso se han utilizado principalmente para capturar requisitos, pero pueden emplearse para
describir cualquier interacción entre el sistema de software y algo externo, como un usuario del sistema.
usuario del sistema. Este enfoque difiere de la especificación funcional tradicional
funcional, en la que se describe la funcionalidad del sistema pero no la interacción
entre el sistema y sus usuarios. El énfasis se pone en los usuarios y los valores para los
usuarios. Impulsado por el caso de uso significa que el proceso de desarrollo se inicia con el caso de uso,
que los diseños se desarrollan a partir de los casos de uso, y que los casos de prueba se derivan de
casos de uso. Así pues, los casos de uso dirigen este proceso de desarrollo de software.
La arquitectura desempeña un papel importante en RUP, ya que describe los aspectos estáticos y dinámicos del sistema global.
del sistema global, destacando los aspectos más importantes y omitiendo los detalles menos importantes. En RUP, la arquitectura proporciona inicialmente lo que Jacobson, Booch y
Rumbaugh (1999) llaman la "forma" del sistema, que es independiente del caso de uso. Describe
describe el diseño de alto nivel, como el estándar de la interfaz de usuario o el procesamiento de errores, que trasciende todos los casos de uso. A partir de esta línea de base, la arquitectura se perfecciona para dar cabida a los principales casos de uso.
casos de uso importantes. Cada uno de los casos de uso importantes representa un componente clave del
del sistema de software, lo que aporta más detalles al diseño. A medida que se
la arquitectura también evoluciona hacia un diseño más maduro y estable. Los casos de uso de
Los casos de uso impulsan la arquitectura y la arquitectura influye en la elección de los casos de uso.
RUP también es iterativo e incremental en el sentido de que promueve el desarrollo de software de gran tamaño en pequeñas piezas o incrementos.
en piezas más pequeñas o incrementos. Al desarrollar el incremento elegido, RUP promueve el
enfoque iterativo. La primera iteración incluiría todos los casos de uso o requisitos
que representan ese incremento o trozo del producto. En la segunda iteración se
los riesgos más importantes del incremento elegido. Las iteraciones sucesivas se basarían
sobre los resultados de las iteraciones anteriores.
Estos tres conceptos de caso de uso, arquitectura e iterativo e incremental forman la base de RUP.
base de RUP. Para estudios más exhaustivos sobre RUP, consulte los libros de la sección Referencias
y Lecturas Sugeridas al final de este capítulo.

4.3.2 Las fases de RUP
Las fases de RUP no reciben el nombre de actividades como diseño, pruebas o codificación;
una iteración puede incluir muchas actividades en diversos grados. Hay cuatro fases en RUP:
1. 1. Inicio
2. Elaboración
3. Construcción
4. Transición
A medida que se desarrolla un incremento del producto, puede pasar por varias iteraciones dentro de
cada fase. El grado de las actividades, como la especificación de requisitos, las pruebas o la codificación, que tienen lugar en cada fase también es diferente.
codificación que tienen lugar en cada fase también es diferente.
La fase de inicio puede considerarse la etapa inicial, cuando el incremento del producto se encuentra aún en una fase temprana de incertidumbre. Durante esta fase se desarrolla una idea inicial.
fase. Durante la fase de elaboración, se formulan los casos de uso detallados y se concretan la arquitectura y el diseño.
arquitectura y el diseño. El incremento del producto se construye, codifica y
y se prueba durante la fase de construcción. Por último, durante la fase de transición, el producto se
grupo restringido de usuarios durante la fase de transición para que lo prueben y corrijan. A continuación,
A continuación, se pone a disposición del público en general. La figura 4.6 muestra las cuatro fases del proceso RUP y cómo se relacionan las actividades de desarrollo con cada una de ellas.
RUP y cómo se relacionan las actividades de desarrollo con las fases. Las actividades de
Las actividades de desarrollo de software de la izquierda de la figura fluyen a través de las cuatro fases. Cada actividad estará en
Cada actividad estará en "modo pico" en diferentes fases. La extensión de cada actividad está representada por el grosor
de la barra con aproximaciones relativas que muestran dónde alcanzarán su punto máximo las actividades. Aunque
Aunque no se muestra explícitamente en esta figura, cualquier actividad como el diseño también puede iterar varias veces
dentro de una fase. RUP no sólo proporciona un desarrollo incremental, sino que también incluye el desarrollo iterativo.
iterativo. Las cuatro fases proporcionan un mecanismo de seguimiento de los hitos del proyecto.
Fase inicial La fase inicial es una fase de planificación que incluye los siguientes objetivos principales
objetivos principales:
Establecer el alcance y aclarar los objetivos del proyecto de software.
Establecer los casos de uso críticos y los principales escenarios que impulsarán la arquitectura y el diseño.
la arquitectura y el diseño. 

Establecer algunas alternativas de arquitectura y diseño inicial.
Calcular el calendario y los recursos necesarios.
Planificar las metodologías de implantación, prueba, integración y configuración.
Estimar los riesgos potenciales.
Para lograr estos objetivos primarios, las actividades de requisitos deben ir
crescendo. La arquitectura del sistema de software se estrecha y
durante esta fase deben considerarse diversas alternativas de diseño. La implementación, las pruebas, las metodologías de integración, las herramientas, etc., se planifican durante la fase inicial.
fase inicial. El calendario general del proyecto, los recursos necesarios y los riesgos potenciales se estiman en función de los requisitos principales y la arquitectura inicial.
basándose en los requisitos principales y la arquitectura inicial. Se establecen los objetivos y la medición del proyecto. Todas las partes interesadas deben estar de acuerdo con las estimaciones y el plan del proyecto.
del proyecto.
Fase de elaboración La elaboración puede ser la fase más crítica del RUP. Al final de
Al final de esta fase, la mayoría de las incógnitas deben estar resueltas. Los principales objetivos de esta fase
son los siguientes:
Establecer todos los requisitos principales y críticos del sistema.
Establecer y demostrar el diseño básico.
Establecer las plataformas y metodologías de implementación, prueba e integración.
Establecer los principales escenarios de prueba.
Establecer la medición y los parámetros de los objetivos acordados.
Organizar y establecer todos los recursos necesarios para la implantación, las pruebas y la integración.
integración.
Para alcanzar estos objetivos, hay que reunir, analizar, comprender, documentar y acordar todos los requisitos,
entendidos, documentados y acordados por todas las partes durante la fase de elaboración. Cualquier
prototipo de los requisitos, así como la arquitectura y la mayor parte del diseño.
del diseño. Cualquier pregunta sobre la viabilidad del diseño debe ser prototipada y respondida. Durante esta fase
Durante esta fase se identifican los principales escenarios de prueba. Se completan los planes de implantación, pruebas e integración. Se adquieren y organizan los recursos necesarios para la implantación, las pruebas y la integración.
e integración. Se completa la formación sobre cualquier metodología o herramienta nueva para la implantación, las pruebas o la integración,
o integración. Se acepta un sistema claro de métricas y mediciones
y se adquieren los recursos para la medición. Es decir, se establece el control del proyecto para el resto de las
fases. Al final de la fase de elaboración, el proyecto de software está listo para
pasar al modo de implementación y prueba completas.
Fase de construcción La fase de construcción es igual a la fase de producción en
fabricación. Al final de esta fase, el código del software debe estar completo y
y probados todos los requisitos principales. Los siguientes objetivos son los puntos clave de esta fase:
Completar la implantación a tiempo dentro del coste estimado.
Lograr la versión del código que se puede liberar a un conjunto restringido de sitios de prueba Alfa.
Establecer las actividades restantes que deben completarse para alcanzar los objetivos del proyecto.
del proyecto.
Para cumplir estos objetivos, la codificación del diseño debe completarse en la
fase de construcción. Todos los casos de prueba previstos deben ejecutarse y la mayoría de los descubiertos problemas se solucionan en esta fase. El software debe cumplir la mayoría de los objetivos establecidos del
del proyecto y las mediciones realizadas deben validarlo. Hay que evaluar
de cuánto y qué actividades restantes son necesarias para alcanzar los objetivos previstos. En
ejemplo, hay que evaluar si se cumple el objetivo de calidad del producto de software.
software. Deben establecerse todas las actividades necesarias para el seguimiento de este objetivo, como pruebas y correcciones adicionales.
y correcciones.
Fase de transición La fase de transición es la última fase antes de la entrega del software a los usuarios generales.
a los usuarios en general. Se integran todas las correcciones y componentes. Los artefactos no codificados, como
como manuales y material educativo, también se integran en el producto completo. En
objetivos clave de esta fase son los siguientes
Establecer el producto de software final para su lanzamiento general.
Establecer la preparación y aceptación del software por parte del usuario.
Preparar el soporte.
Obtener la aprobación para la publicación y el despliegue.
Deben completarse todas las pruebas alfa y beta con un número restringido de usuarios e integrarse las correcciones de los defectos descubiertos.
Las correcciones de los defectos descubiertos se integran en la versión final durante esta fase. Hay que formar a los usuarios. Todas las actividades de transición, como la migración de datos y las modificaciones del proceso de uso
antes del final de esta fase. El grupo de soporte de software
recibe formación y debe estar preparado para atender a los usuarios. Si se trata de un producto de software
Si se trata de un producto de software para venta externa, debe formarse a la organización de ventas, y el material de marketing debe crearse y estar disponible para su distribución.
y estar disponible para su distribución. Se realiza una evaluación final del software, en función de sus objetivos,
y se toma una decisión sobre su lanzamiento.
4.4 Criterios de entrada y salida
Los procesos analizados hasta ahora han hecho hincapié en la secuenciación y coordinación de actividades. Sin embargo, el RUP va más allá y proporciona algunas directrices sobre qué artefactos deben ser desarrollados y por quién.
deben ser desarrollados por quién. Sin embargo, hay muy pocas directrices sobre la cantidad de cada
actividad debe realizarse. Es decir, ¿cuáles son los criterios de salida de cada actividad y de entrada para la siguiente?
de entrada para la siguiente actividad.
La figura 4.7 muestra que los criterios de entrada de una actividad deben cumplirse antes de que ésta pueda comenzar.
actividad. Los criterios de salida deben cumplirse antes de que la actividad pueda considerarse completa.

y antes de que pueda comenzar la siguiente actividad. La dificultad surge cuando las actividades se solapan
de forma concurrente. Los criterios de entrada y salida deben definirse entonces con mucha más
granularidad.
4.4.1 Criterios de entrada
Antes de realizar cualquiera de las actividades representadas en el diagrama de proceso, debemos preguntarnos
la condición que permite iniciar la ejecución de esa actividad. Las condiciones para
iniciar la actividad definen los criterios de entrada. Estos incluyen un listado y una descripción de
los siguientes recursos:
Artefactos necesarios
Personas necesarias
Herramientas necesarias
Definición necesaria de la actividad a realizar
Debe haber una lista específica de artefactos. No basta con enumerarlos. Estos artefactos
artefactos deben estar en condiciones de ser utilizados por la actividad. Por ejemplo
la tarea de diseño que necesita las especificaciones de requisitos. El estado de cada especificación
debe definirse como completado, lo que significa lo siguiente:
Todas las especificaciones han sido revisadas por los clientes y otras partes interesadas.
Se modifican todas las excepciones encontradas durante la revisión.
Las especificaciones modificadas son aceptadas por todas las partes.
Cuando las especificaciones de requisitos han alcanzado estas condiciones, se consideran completas y han cumplido los criterios de entrada para la tarea de diseño. Tenga en cuenta que si el proceso
proceso es incremental, el estado completado puede aplicarse sólo al requisito incremental
incremental necesario para la siguiente actividad de diseño.
También deben especificarse las personas necesarias para realizar la tarea. Deben estar en
deben estar preparadas, lo que significa que están disponibles y que pueden dedicarse a la tarea antes de su inicio.
comienzo de la tarea.
Se especifican todas las herramientas necesarias o que puedan utilizarse posteriormente para realizar la tarea.
Una vez más, no basta con enumerar las herramientas. La justificación y las expectativas del uso de cualquier
herramienta para la tarea. Las personas encargadas de utilizar las herramientas deben
deben ser identificadas y formadas antes de empezar a realizar la tarea.
El requisito más obvio, pero que a menudo se pasa por alto, es la definición y explicación de la propia tarea. Si la tarea no se entiende con claridad, los distintos individuos
pueden realizar la tarea de forma diferente, lo que puede provocar resultados erráticos.
La definición de los criterios de entrada para cada uno de los pasos o actividades descritos en un
proceso llevará la definición de alto nivel del proceso a un nivel ejecutable. También
También permite que cada parte de la organización adapte el proceso especificando criterios de entrada ligeramente diferentes para cada una de las tareas del proceso.
criterios de entrada para cada una de las tareas de un proceso.
4.4.2 Criterios de salida
Antes de declarar finalizada una actividad, es necesario especificar con antelación los criterios de salida de dicha declaración.
deben especificarse con antelación. Sólo cuando se cumplan esos criterios podrá considerarse que la actividad completa. De nuevo, en el caso de actividades incrementales y solapadas, los criterios de salida
deben declararse a un nivel mucho más fino.
El objetivo principal de los criterios de salida es describir los artefactos que deben estar disponibles
para la siguiente actividad. Se debe definir una descripción clara de lo que debe incluirse en cada artefacto completado.
artefacto completado. Además, es importante detallar claramente cualquier condición
como las siguientes:
Se revisan todos los artefactos.
Se han corregido todos los errores o un porcentaje determinado de ellos.
Los responsables de las actividades posteriores han aprobado y aceptado los artefactos.
Hay otras condiciones que podemos incluir como parte de los criterios de salida, por ejemplo
por ejemplo, que la persona que vaya a participar en la siguiente actividad descendente se libere de la
actividad actual. Lo importante es que los criterios de salida se especifiquen claramente
con antelación.
4.5 Modelos de evaluación de procesos
Los procesos de desarrollo y soporte de ingeniería de software siguen modificándose,
mejorados e inventados a través de innumerables estudios, experimentos e implementaciones,
algunos con gran éxito y otros con rotundo fracaso (Cusumano et al., 2003; MacCormack,
2001). La industria del software lleva años reconociendo la importancia de los procesos de desarrollo de software.
de software. Una de las organizaciones clave que ha contribuido, hecho avanzar y
ha defendido los procesos de desarrollo de software es el Instituto de Ingeniería de Software (SEI),
un centro de investigación y desarrollo financiado por el Departamento de Defensa de EE.UU. y situado
en el campus de la Universidad Carnegie Mellon. Su objetivo principal es "ayudar a otros a realizar
mejoras mesuradas en sus capacidades de ingeniería de software". (Véase la sección Referencias
y Lecturas Sugeridas para la dirección web del SEI).
Otra organización que ha contribuido a la ingeniería del software es la Organización Internacional de Normalización (ISO).
Internacional de Normalización (ISO). Su serie ISO 9000 de normas de calidad del software incluye
el documento ISO/IEC 90003:2004, que proporciona orientación para que las organizaciones apliquen la norma
ISO9001:2000 a las actividades de software informático. En concreto, existen cuatro documentos
ISO/IES 9126-1 a ISO/IES 9126-4- que abordan diversos aspectos de la calidad del software.
Además, el documento ISO/IEC 12207 Standard for Information Technology trata y
proporciona un marco para los procesos del ciclo de vida del software. Estos documentos pueden adquirirse
en el sitio web de ISO que aparece en la sección Referencias y lecturas recomendadas. Tanto el SEI
como la ISO contribuyeron en gran medida a evaluar la madurez de la organización en su software
desarrollo y soporte de software.
4.5.1 Modelo de Madurez de Capacidades del SEI
El Modelo de Madurez de Capacidades (CMM), inicialmente propuesto por el SEI, es un marco utilizado para ayudar a una organización de software a definir su nivel de madurez.
para ayudar a una organización de software a definir su nivel de madurez en el desarrollo de software. (Véase
Paulk et al., 2003 para obtener información sobre el documento original del CMM). El modelo presenta
cinco niveles de madurez y se basa en el concepto de mejora continua. El nivel
de madurez de una organización de software viene determinado por su práctica de diferentes conjuntos de
actividades clave del proceso de desarrollo de software. Los niveles son secuenciales y acumulativos en el sentido de que se espera que una organización evaluada en un Nivel x haya ascendido del Nivel
(x - 1). Existe una lista de evaluadores CMM formados oficialmente, que puede obtenerse en SEI,
que realizan la evaluación de una organización y proporcionan la retroalimentación sobre la fuerza
y debilidades de las actividades y compromisos de los procesos clave de la organización. Los cinco
niveles de CMM están representados en la Figura 4.8.
En el nivel inicial (nivel 1 de la figura), una organización carece de procesos, y cualquier éxito
probablemente se atribuya a un líder fuerte y experimentado. La probabilidad de repetir
éxito es baja. A medida que una organización define, practica y mejora continuamente los
los distintos procesos, asciende en la escala de madurez.
En el nivel 2, hay seis procesos clave que una organización debe dominar:
Gestión de requisitos
Seguimiento y supervisión de proyectos de software
Garantía de calidad del software
Planificación de proyectos de software
Gestión de subcontratos
Gestión de la configuración del software
Una organización de Nivel 2 (el nivel repetible) ha dominado estos procesos clave relacionados con la gestión de proyectos y se espera que sea capaz de repetir su éxito cuando se le asigne un proyecto similar.
proyecto similar.
Para que una organización pase del Nivel 2 al Nivel 3 (el nivel definido), debe
dominar otros siete procesos clave:
Enfoque de los procesos de la organización
Programa de formación
Ingeniería de productos de software
Revisión por pares
Definición del proceso organizativo
Gestión integrada de software
Coordinación entre grupos En el Nivel 3, la organización domina los principales procesos relacionados con la construcción
de software junto con procesos adicionales relacionados con la gestión de proyectos.
Una organización asciende al Nivel 4 (el nivel gestionado) cuando centra sus esfuerzos en
la gestión cuantitativa y de calidad, además de todos los procesos clave de los niveles 2 y 3. De este modo, se añaden dos procesos clave más.
Como tal, se añaden dos procesos clave más:
Gestión de procesos cuantitativos
Gestión de la calidad del software
Se introducen métricas y mediciones del proceso y de los artefactos de software.
La gestión cuantitativa de atributos como la calidad, la productividad o la eficacia forma parte de la organización en este nivel.
de la organización en este nivel. Con las mediciones capturadas, se hace visible la
actividades previas, lo que permite futuras mejoras tanto de los procesos como del producto.
el producto.
El nivel más alto de MMC es el nivel 5 (el nivel de optimización). Aquí se hace hincapié en
la mejora continua. Para facilitar dicha mejora, deben incluirse tres procesos clave
deben incluirse:
1. 1. Prevención de defectos
2. Gestión del cambio tecnológico
3. Gestión del cambio de procesos
Todos los procesos clave de este último nivel contribuyen a una organización preparada para
cambios y mejoras.
El CMM original del SEI ha sido utilizado por miles de organizaciones de software en múltiples países. En la actualidad, empresas grandes y pequeñas de todo el mundo -desde Wipro en India
a Neusoft en China- han alcanzado el Nivel 5. En ocasiones, varias organizaciones de una misma empresa
misma empresa pueden ser evaluadas en distintos niveles. Por ejemplo, Lockheed Martin, el gigante tecnológico estadounidense de la industria aeroespacial.
Por ejemplo, Lockheed Martin, el gigante tecnológico estadounidense del sector aeroespacial, es un ejemplo de empresa que cuenta con varias organizaciones que han alcanzado el nivel CM.
organizaciones dentro de ella que han alcanzado el nivel 5 de CMM. Estados Unidos es líder mundial
en número de organizaciones evaluadas por CMM. Algunas organizaciones, sin embargo, sólo utilizan
el marco CMM para la auto-mejora y nunca solicitan una evaluación formal. Otras han utilizado el nivel CMM evaluado como herramienta de marketing para sus organizaciones. Esto es
especialmente evidente en el sector de servicios de software.
El tiempo necesario para ascender de un nivel al siguiente suele ser del orden de uno o dos años.
el orden de uno o dos años, raramente en meses o días.
4.5.2 Integración del Modelo de Madurez de las Capacidades del SEI
En 2001, el CMM fue actualizado al Modelo Integrado de Madurez de Capacidades (CMMI).
Una vez más, el factor importante a recordar es que el propósito del CMMI es proporcionar orientación
para mejorar los procesos de una organización y su capacidad para desarrollar, gestionar y
dar soporte a los productos y servicios de software. Si bien hay múltiples aspectos de la CMMI
(por ejemplo, ingeniería de sistemas, ingeniería de software, desarrollo integrado de productos y procesos, y contratación de proveedores), el que nos interesa y trataremos aquí es el
el CMMI-SW, el modelo de ingeniería de software.

El modelo CMMI-SW tiene dos representaciones:
Continuo
Por etapas
El modelo de representación continua es más aplicable a la evaluación y mejora de procesos. El modelo de representación por etapas se aplica mejor, al igual que el CMM, a la evaluación de la madurez de una organización.
para evaluar la madurez de una organización. En las tres secciones siguientes analizaremos en primer lugar
los tres conceptos clave comunes a las representaciones continua y por etapas,
y luego delinearemos las diferencias entre las dos representaciones.
Las áreas de proceso de CMMI El primer concepto clave relacionado tanto con la continua y
CMMI es que hay veinticinco grandes áreas de proceso que cubren cuatro grandes categorías de procesos
cuatro categorías principales de procesos: (1) gestión de procesos, (2) gestión de proyectos,
(3) ingeniería y (4) soporte.
Las cinco áreas de proceso siguientes corresponden a la gestión de procesos:
1. 1. Enfoque organizativo de los procesos
2. 2. Definición del proceso organizativo
3. 3. Formación organizativa
4. Desempeño del proceso organizativo
5. 5. Innovación y despliegue de la organización
Las siguientes ocho áreas de proceso entran dentro de la gestión de proyectos:
1. 1. Planificación del proyecto
2. 2. Seguimiento y control del proyecto
3. Gestión de acuerdos con proveedores
4. Gestión integrada de proyectos
5. 5. Gestión de riesgos
6. 6. Trabajo en equipo integrado
7. 7. Gestión integrada de proveedores
8. Gestión cuantitativa de proyectos
Las seis áreas de proceso siguientes forman parte de la ingeniería:
1. 1. Desarrollo de requisitos
2. 2. Gestión de requisitos
3. Solución técnica
4. Integración del producto
5. Verificación
6. Validación
Las seis últimas áreas de proceso corresponden al apoyo:
1. 1. Gestión de la configuración
2. 2. Garantía de calidad de procesos y productos
3. 3. Medición y análisis
4. Entorno organizativo para la integración
5. Análisis y resolución de decisiones
6. Análisis causal y resolución
Estas veinticinco áreas de proceso constituyen la base de la evaluación de procesos en CMMI.
Niveles en CMMI Tanto la representación continua como la escalonada utilizan niveles para la evaluación.
evaluación. En el caso de la representación continua, hay 6 (0-5) niveles de capacidad
para evaluar las áreas de proceso. La representación por etapas tiene 5 (1-5) niveles de madurez para
para evaluar la organización. En la figura 4.9 se comparan los niveles de capacidad y por etapas. En
utilización de los niveles para la designación de los resultados de la evaluación es el segundo concepto clave en CMMI.
Tenga en cuenta que los nombres de los niveles 2 a 5 son los mismos tanto para la capacidad continua de los niveles y los niveles de madurez por etapas.
niveles de capacidad continua y los niveles de madurez por etapas. Sin embargo, como se explicará en una sección posterior de
este capítulo, estos niveles son diferentes en sus estructuras.
Objetivos y Prácticas en CMMI Un tercer concepto clave que es común tanto a la continua
y las representaciones por etapas en CMMI es la noción de objetivos y prácticas. Dentro de cada
Dentro de cada una de las veinticinco áreas de proceso hay un conjunto designado de objetivos específicos que describen de forma única
las prácticas específicas que deben aplicarse para satisfacer esa área de proceso. Además
las prácticas específicas asociadas con cada uno de los objetivos son también únicas para cada objetivo. Así,
las prácticas específicas son todas diferentes, como se ilustra en la Figura 4.10.
A modo de ejemplo, consideremos una de las veinticinco áreas de proceso, el enfoque del proceso organizativo.
Para esta área de proceso, hay dos objetivos específicos con sus respectivas prácticas específicas.
El objetivo específico 1 tiene tres prácticas específicas, y el objetivo específico 2 tiene cuatro prácticas específicas.
"Meta específica 1: Las fortalezas, debilidades y oportunidades de mejora de los procesos de la organización se identifican periódicamente y según sea necesario.
Práctica específica 1.1: Establecer las necesidades de los procesos de la organización.
Práctica específica 1.2: Evaluar los procesos de la organización.
Práctica específica 1.3: Identificar mejoras en los procesos.

Objetivo específico 2: Se planifican e implantan mejoras, se despliegan los activos de procesos de la organización y se incorporan experiencias relacionadas con los procesos a los activos de procesos de la organización.
y las experiencias relacionadas con los procesos se incorporan a los activos de procesos de la organización.
Práctica específica 2.1: Establecer y mantener planes de acción de procesos.
Práctica específica 2.2: Implementar planes de acción de procesos.
Práctica específica 2.3: Desplegar los activos de procesos de la organización.
Práctica específica 2.4: Incorporar productos de trabajo relacionados con los procesos, medidas e información de mejora en los activos de procesos de la organización".
CMU/SEI-2002-TR-028, http://resources.sei.cmu.edu/asset_files/Technical
Report/2002_005_001_14069.pdf
Consulte el documento CMMI, CMU/SEI-2002-TR-028, en la sección Referencias y Lecturas
para obtener una lista completa de objetivos específicos y sus respectivas prácticas específicas para cada uno de los veinticinco procesos.
para cada una de las veinticinco áreas de proceso.
En contraste con los objetivos específicos, que son diferentes para cada área de proceso, hay cinco
objetivos genéricos aplicables a las veinticinco áreas de proceso (véase la Figura 4.10). Los cinco objetivos genéricos de
Los cinco objetivos genéricos son los siguientes:
Objetivo genérico 1: Alcanzar los objetivos específicos del área de procesos.
Objetivo genérico 2: Institucionalizar el proceso gestionado.
Objetivo genérico 3: Institucionalizar el proceso definido.
Objetivo genérico 4: Institucionalizar el proceso gestionado cuantitativamente.
Objetivo genérico 5: Institucionalizar el proceso de optimización.
Estos objetivos genéricos también se corresponden con los niveles de capacidad 1 a 5, respectivamente, de la representación continua.
a 5, respectivamente. El nivel de capacidad 0, que es el nivel incompleto, no tiene ningún objetivo genérico asociado.
genérico asociado a él.

Asociados a cada uno de los cinco objetivos genéricos hay conjuntos de prácticas genéricas. Dado que los
son aplicables a todas las áreas de proceso, el conjunto de prácticas genéricas también es aplicable
a las veinticinco áreas de proceso. Hay una práctica genérica asociada al objetivo genérico
1. Hay diez prácticas genéricas asociadas al objetivo genérico 2. El objetivo genérico 3 tiene dos
prácticas genéricas. El objetivo genérico 4 tiene asociadas dos prácticas genéricas y el objetivo genérico
genérico 5 tiene dos prácticas genéricas. Dado que los objetivos genéricos son aplicables a todas las áreas de proceso, sus respectivas prácticas genéricas también son aplicables a todas las áreas de proceso.
Modelo de Representación Continua El modelo de representación continua, en el que cada
área de proceso se evalúa en su propio nivel de capacidad, utiliza tanto los objetivos específicos como los genéricos para evaluar las áreas de proceso.
objetivos genéricos para evaluar las áreas de proceso. Un ejemplo de perfil del nivel de capacidad
En la figura 4.11 se muestra un ejemplo de perfil del nivel de capacidad de una organización por áreas de proceso. Este perfil no sólo proporciona
una evaluación, sino que también sirve de orientación para que una organización mejore las áreas de proceso que necesitan mejoras.
áreas de proceso que necesitan mejoras. El modelo de representación continua tiene varias funciones
en una organización:
Permite a una organización seleccionar el orden de las mejoras que mejor se adapte a sus necesidades y estructura.
Permite realizar comparaciones entre distintas organizaciones por áreas de proceso.
Facilita la migración y la comparación con la norma Electronic Institute Alliance International
(EIA/IS) 731 y la Organización Internacional de Normalización y la Comisión Electrotécnica Internacional (ISO/IEC).
Electrotécnica Internacional (ISO/IEC) 15504.
Cada área de proceso comienza inicialmente en el nivel de capacidad 0 (CL0), o nivel incompleto.
Para que cualquier área de proceso ascienda del CL0 al siguiente nivel, ya sea el nivel realizado
o CL1, deben completarse dos conjuntos de actividades.
Los objetivos específicos de esa área de proceso deben alcanzarse completando todas las
prácticas específicas asociadas para esos objetivos específicos.
El objetivo genérico 1 debe alcanzarse completando sus prácticas genéricas asociadas.
Una vez que un área de proceso alcanza el nivel de capacidad 1, el nivel realizado, los niveles posteriores
se alcanzan satisfaciendo los objetivos genéricos subsiguientes y sus respectivas prácticas genéricas.
prácticas (véase la figura 4.12). La figura muestra que para que un área de proceso mejore
de CLn a CLn+1, debe cumplirse el objetivo genérico n+1.
Modelo de representación por etapas En un modelo de representación por etapas, hay cinco niveles de madurez (NM).
niveles de madurez (NM). Las mismas veinticinco áreas de proceso se agrupan en cuatro de los cinco niveles de madurez.
de madurez. El nivel de madurez 1, el nivel inicial, no tiene ningún área de proceso asociada. Esencialmente,
ML1 es similar al CL0 del modelo de representación continua. La organización alcanza un
nivel de madurez satisfaciendo el conjunto de áreas de proceso que se agrupan en ese nivel de madurez.
madurez. Las agrupaciones de áreas de proceso para los niveles de madurez del modelo de representación por etapas
son las siguientes:
ML5
Innovación organizativa y despliegue
Análisis causal y resolución
ML4
Rendimiento de los procesos organizativos
Gestión cuantitativa de proyectos
ML3
Desarrollo de requisitos
Solución técnica
Integración del producto
Verificación
Validación
Enfoque del proceso organizativo
Definición del proceso organizativo
Formación organizativa
Gestión integrada de proyectos
Gestión de riesgos
Trabajo en equipo integrado
Gestión integrada de proveedores
Análisis y resolución de decisiones
Entorno organizativo para la integración
ML2
Gestión de requisitos
Planificación de proyectos
Seguimiento y control de proyectos
Gestión de acuerdos con proveedores
Medición y análisis
Garantía de calidad de procesos y productos
Gestión de la configuración
ML1
Ninguno
Los niveles de madurez son secuenciales, y cualquier nivel de madurez n se construye sobre el nivel de madurez
n - 1. El modelo de representación por etapas proporciona a una organización una única
basado en el conjunto de áreas de proceso satisfechas. Por ejemplo, una organización
se evalúa como nivel de madurez 2 si se satisfacen las siete áreas de proceso agrupadas en ML2.
La representación por etapas proporciona lo siguiente para una organización:
Una secuencia de mejoras de las áreas de proceso por niveles de madurez.
La capacidad de comparar entre organizaciones por niveles de madurez
Fácil migración desde el modelo CMM de software anterior
La regla para que un área de proceso se considere satisfecha en un modelo de representación por etapas
es similar a la del modelo de representación continua. Sin embargo, existen algunas
sutiles. Un área de proceso que se agrupa en ML2, nivel gestionado, necesitaría satisfacer
todos sus objetivos específicos y prácticas específicas asociadas junto con el objetivo genérico 2 y sus
prácticas genéricas asociadas. Para las áreas de proceso que se agrupan en ML3, nivel definido,
esas áreas de proceso necesitan satisfacer todas las metas específicas y prácticas específicas junto con
objetivo genérico 2 y las prácticas genéricas asociadas. Cada área de proceso agrupada en el nivel ML4,
nivel de gestión cuantitativa, deberá satisfacer todos sus objetivos específicos y prácticas específicas, así como el objetivo genérico 3 y las prácticas genéricas asociadas.
junto con el objetivo genérico 3 y las prácticas genéricas asociadas. De forma similar a ML4,
cada área de proceso en ML5, nivel de optimización, necesitaría satisfacer todos sus objetivos específicos y prácticas específicas junto con el objetivo genérico 3 y las prácticas genéricas asociadas.
específicas junto con el objetivo genérico 3 y las prácticas genéricas. Obsérvese que al satisfacer
los niveles de madurez por etapas, los objetivos genéricos 1, 4 y 5 no juegan ningún papel en el esquema.
4.6 Definición del proceso y comunicación
Hemos discutido varios procesos tradicionales de desarrollo de software. Aunque sirven
Aunque sirven como buenos modelos, es muy probable que necesiten alguna modificación para adaptarse a una organización específica.
organización. Dependiendo de los objetivos del proyecto de software, puede que se necesite o se haga hincapié en un conjunto de actividades ligeramente diferente.
de actividades ligeramente diferente. Como observó Osterweil (1987), el proceso de
es sólo un vehículo para llevar a cabo esas actividades. Por tanto, especificar
el modelo de proceso es similar a la construcción de un sistema de software en sí. Un modelo de proceso o
especificación es una representación abstracta del proceso real. Es importante que proceso modificado esté bien definido y se comunique a todos los participantes para que el proyecto
pueda llevarse a cabo sin problemas.
La especificación de un proceso de software consta de dos partes básicas:
Las actividades que deben incluirse en el proyecto de software
El orden en que deben realizarse estas actividades
Estos dos componentes principales se amplían y perfeccionan para incluir el siguiente conjunto de elementos:
Actividades: Descripciones detalladas de cada una de las actividades incluidas en el proceso
Control: Criterios de entrada y salida necesarios para cada actividad, además del orden en que debe realizarse cada una.
en que debe realizarse cada una
Artefactos: El producto resultante de cada una de las actividades
Recursos: Las personas que realizan las actividades
Herramientas: Las herramientas que pueden utilizarse para mejorar la realización de la actividad.
Una definición de proceso de software para proyectos de desarrollo y soporte debe incluir
toda la información anterior con distintos grados de detalle. La definición del proceso
La definición de proceso modificada para una organización específica debe describir las actividades a realizar,
especificar las condiciones controladas de los criterios de entrada y salida, y definir el orden en que
orden en que deben realizarse estas actividades. Es necesario identificar y definir los artefactos resultantes, incluidas las situaciones nulas, de cada una de las actividades. Un proyecto de software
suele ser llevado a cabo por varias personas, cada una de ellas con diferentes habilidades y experiencia. En
número de personas necesarias, sus niveles de cualificación individual y el nivel de experiencia de cada una de ellas.
de cada uno. Por último, deben especificarse todas las herramientas que puedan mejorar la realización de las actividades.
actividades.
Es difícil y tedioso definir todas las actividades anteriores y los elementos relacionados. Así, un
equipo puede decidir hacer hincapié en las partes más relevantes para cada proyecto.
Por otro lado, para dar cierta flexibilidad a un equipo muy experimentado que
que haya trabajado en proyectos similares con anterioridad, puede optar por definir las cinco partes a un alto nivel para que la dirección tenga una visión general.
alto nivel a efectos de gestión general. Tenga en cuenta que especificar el proceso de software
hasta el nivel más detallado sería casi equivalente a realizar el diseño detallado
y programación del propio proceso de software.
4.7 Resumen
En capítulos anteriores hemos aludido a la importancia de contar con un proceso o un conjunto de procesos para
guiar a los desarrolladores de software en grandes proyectos de desarrollo y soporte. En este capítulo
hemos recorrido tres modelos de proceso tradicionales:
Cascada
Incremental
Espiral
Se introdujo un modelo de proceso más moderno, el Proceso Racional Unificado (RUP). En
en la necesidad de contar con criterios bien definidos tanto para la entrada como para la salida de las actividades de un modelo de proceso.
de las actividades de un modelo de proceso.
El Instituto de Ingeniería de Software de la Universidad Carnegie Mellon ha sido una fuerza impulsora en el campo del modelado y la evaluación de procesos.
en el campo del modelado y la evaluación de procesos. Su primer modelo de
de software, el Modelo de Madurez de Capacidades (CMM), es ahora muy conocido entre los
del software. En los últimos años, el modelo mejorado, Capability Maturity Model Integrated
(CMMI), está ganando impulso. El modelo de representación continua del CMMI permite a una organización evaluar el nivel de capacidad de sus áreas de proceso por separado, mientras que el modelo por etapas
permite a una organización evaluar el nivel de madurez de toda la organización, de forma muy parecida al modelo CMM.
el modelo CMM. Es muy probable que un proceso estándar deba modificarse y perfeccionarse
antes de que pueda ser utilizado por un proyecto de software.
En el próximo capítulo, presentaremos los procesos y metodologías más recientes
como Agile y Extreme Programming.