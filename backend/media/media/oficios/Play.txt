##############################################################################################################
activity_main.xml
##############################################################################################################


<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity" >

    <LinearLayout
        android:id="@+id/linearLayout3"
        android:layout_width="match_parent"
        android:layout_height="100dp"
        android:textAlignment="textEnd"
        tools:layout_editor_absoluteX="-4dp"
        tools:layout_editor_absoluteY="0dp">

        <Button
            android:id="@+id/btnPrev"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:onClick="prevClick"
            android:text="Anterior" />

        <Button
            android:id="@+id/btnPlay"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:onClick="playClicked"
            android:text="Play" />

        <Button
            android:id="@+id/btnStop"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:onClick="stopClicked"
            android:text="Stop" />

        <Button
            android:id="@+id/btnNext"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:onClick="nextClick"
            android:text="Siguiente" />
    </LinearLayout>

    <TextView
        android:id="@+id/tvTitulo"
        android:layout_width="198dp"
        android:layout_height="56dp"
        android:layout_marginTop="40dp"
        android:marqueeRepeatLimit="marquee_forever"
        android:singleLine="true"
        android:textAlignment="center"
        android:textSize="20sp"
        android:visibility="invisible"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.499"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/linearLayout3" />
</androidx.constraintlayout.widget.ConstraintLayout>


###################################################################################
MainActivity.kt
###################################################################################

package com.example.play

import android.media.MediaPlayer
import android.os.Bundle
import android.text.TextUtils
import android.view.View
import android.widget.Button
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat

class MainActivity : AppCompatActivity() {
    val fd by lazy {
        //assets.openFd("Habibi.mp3")
        assets.openFd(cancionActual)
//fichero de descripción, descriptor.
    }
    val mp by lazy{
//objeto para reproducir la canción de tipo mediaPlayer
// crear variable m de la clase MediaPlayer.
//Se llama el método setDataSource, se lee los parámetros del fichero
        val m= MediaPlayer()
        m.setDataSource(
            fd.fileDescriptor,
            fd.startOffset,
            fd.length
        )
        fd.close()
        m.prepare() // se debe preparar el fichero
        m// se va a igualar a m.
    }
    lateinit var btnPlay: Button
    val nombreCancion by lazy{
        findViewById<TextView>(R.id.tvTitulo)
    }
    val canciones by lazy{
        val nombreFichero = assets.list("")?.toList()?: listOf()
        nombreFichero.filter { it.contains(".mp3") }
    }
    var cancionActualIndex=0
        set(value){
            var v=if(value==-1){
                canciones.size-1
            }
            else {
                value%canciones.size
            }
            field=v
            cancionActual=canciones[v]
        }
    lateinit var cancionActual:String

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        btnPlay=findViewById(R.id.btnPlay)
        cancionActual=canciones[cancionActualIndex]
        nombreCancion.text=cancionActual
        nombreCancion.setEllipsize(TextUtils.TruncateAt.MARQUEE)
        nombreCancion.setSelected(true)

    }
    fun playClicked(view: View){ // todo lo que es gráfico recibe una view
        if(!mp.isPlaying){ //Si no se está reproduciendo que inicie
            mp.start()
            btnPlay.text="Pause"
            nombreCancion.visibility=View.VISIBLE
        }
        else {
            mp.pause()
            btnPlay.text="Play"
            nombreCancion.visibility=View.INVISIBLE
        }
    }
    fun stopClicked(view: View){
        if(mp.isPlaying){
            mp.pause()
            btnPlay.text="Play"
            nombreCancion.visibility=View.INVISIBLE
        }
        mp.seekTo(0)// para deterner la canción y mandarla al inicio
    }
    fun nextClick(view:View){
        cancionActualIndex++
        refreshCancion()
    }
    fun refreshCancion(){
        mp.reset()
        val fd=assets.openFd(cancionActual)
        mp.setDataSource(
            fd.fileDescriptor,
            fd.startOffset,
            fd.length
        )
        mp.prepare()
        playClicked(btnPlay)
        nombreCancion.text=cancionActual

    }
    fun prevClick(view:View){
        cancionActualIndex--
        refreshCancion()
    }
}